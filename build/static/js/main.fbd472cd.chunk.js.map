{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","components/layout/header.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","backgroundColor","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","deleteTodo","buttonStyle","Component","propType","PropType","object","isRequired","height","width","color","border","borderRadius","cursor","float","Todos","todos","map","key","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","flex","placeholder","className","About","Fragment","header","headerStyle","linkStyle","to","textAlign","App","uuid","filter","newTodo","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fbd472cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropType from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n    \r\n    getStyle = () => {\r\n        // if (this.props.todo.completed){\r\n        //     return {\r\n        //         textDecoration: 'line-through'\r\n        //     }\r\n        // }\r\n        // else{\r\n        //     return{\r\n        //         textDecoration: 'none'\r\n        //     }\r\n        // }\r\n        return{\r\n            backgroundColor: \"#e8e8e8\",\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n    // markComplete = (e) => {\r\n\r\n    // }\r\n\r\n    render() {\r\n        const {id,title} = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this,id)}/>{''}\r\n                    &nbsp;&nbsp;\r\n                    {title}\r\n                    <button onClick= {this.props.deleteTodo.bind(this,id)} style = {buttonStyle}>\r\n                        Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTodoItem.propType = {\r\n    todo : PropType.object.isRequired\r\n}\r\n\r\nconst buttonStyle = {\r\n    height: '20px',\r\n    width : '100px',\r\n    backgroundColor: '#37474f',\r\n    color : '#ffffff',\r\n    border: 'none',\r\n    borderRadius: '5%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\n// const itemStyle = {\r\n//     backgroundColor : '#e8e8e8'\r\n// }\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component{\r\n    // markComplete = () => {\r\n\r\n    // }\r\n\r\n    render(){\r\n      return this.props.todos.map((todo) => (\r\n        <TodoItem key={todo.id} todo={todo} \r\n            // markComplete={this.markComplete}\r\n            markComplete={this.props.markComplete}\r\n            deleteTodo = {this.props.deleteTodo}\r\n        />\r\n      ));\r\n    }\r\n  }\r\n\r\n//PropTypes\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React, { Component } from 'react'\r\n\r\nexport class AddTodo extends Component {\r\n\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    onChange = (e) => this.setState(\r\n        {\r\n            [e.target.name]: e.target.value\r\n        }\r\n    );\r\n\r\n    onSubmit = (e)=> {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState(\r\n            {\r\n                title: ''\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{ display : 'flex'}}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    style = {{\r\n                        flex :'10',\r\n                        padding: '5px'\r\n                    }}\r\n                    placeholder= \"Add Todo ...\"\r\n                    value={this.state.title}\r\n                    onChange = { this.onChange }\r\n                />\r\n                <input\r\n                    type = \"submit\"\r\n                    value = \"Add\"\r\n                    className = \"submitButton\"\r\n                    style = {\r\n                        {\r\n                            flex : '1'\r\n                        }\r\n                    }\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div className=\"about\">\r\n            <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>Todo App is a todo list application built using React JS.</p>\r\n            <p>verson: v1.0.0</p>\r\n            </React.Fragment>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function header() {\r\n    return (\r\n        <header style= {headerStyle}>\r\n            <h1>Todo App</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link>&nbsp;&nbsp;|&nbsp;&nbsp;<Link style={linkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst linkStyle = {\r\n    color: '#ffffff',\r\n    textDecoration: 'none',\r\n}\r\n\r\nconst headerStyle = {\r\n    backgroundColor:'#263238',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\nimport './App.css';\nimport {v4 as uuid} from 'uuid';\nimport Header from './components/layout/header';\n\nclass App extends Component{\n\n  state = {\n    todos: [\n      {\n        id: uuid(),\n        title: 'Breakfast',\n        completed: false,\n      },\n      {\n        id: uuid(),\n        title: 'Classes',\n        completed: false,\n      },\n      {\n        id: uuid(),\n        title: 'Homework',\n        completed: false,\n      },\n    ]\n  }\n  //Toggle Complete\n  markComplete = (id) => {\n    this.setState(\n      {\n        todos: this.state.todos.map(\n          todo => {\n            if(todo.id === id){\n              todo.completed = !todo.completed\n            }\n            return todo;\n          }\n        )\n      }\n    )\n  }\n  // Delete Todo Item\n  deleteTodo = (id) => {\n    this.setState(\n      {\n        todos : [...this.state.todos.filter(todo=>todo.id !== id )]\n      }\n    );\n  }\n\n  //Add Todo Item\n  addTodo = (title) => {\n    // console.log(title+ \" ADDED\");\n    const newTodo = {\n      id: uuid(),\n      title: title,\n      completed: false\n    }\n    this.setState({\n      todos : [...this.state.todos , newTodo]\n    })\n  }\n\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={props=>(\n              <React.Fragment>\n                <AddTodo addTodo= {this.addTodo}/>\n                <Todos todos={this.state.todos}\n                  markComplete = {this.markComplete}\n                  deleteTodo = {this.deleteTodo}\n                />\n              </React.Fragment>\n            )} />\n            <Route path=\"/about\" component= {About}/>\n          </div>  \n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}